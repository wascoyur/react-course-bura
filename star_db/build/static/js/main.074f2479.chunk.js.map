{"version":3,"sources":["services/swapi/swapi-servicw.js","components/header/index.js","components/header/header.js","components/spinner/index.js","components/spinner/spinner.js","components/random-planet/random-planet.js","components/random-planet/index.js","components/item-list/index.js","components/item-list/item-list.js","components/item-details/item-details.js","components/item-details/index.js","components/row/index.js","components/row/row.js","components/planet-page/index.js","components/planet-page/planet-page.js","components/people-page/index.js","components/people-page/people-page.js","components/starship-page/starship-page.js","components/app/index.js","components/app/app.js","index.js"],"names":["SwapiService","_apiBase","_imgApiBase","getAllPeople","a","getResource","resp","out","results","map","item","_transformPerson","getPerson","id","people","getImgPerson","getImgPlanet","getImgSpaceShip","getPlanet","planet","pOut","_transformPlanet","getAllPlanets","response","planets","getSpaceShip","ship","_transformSpaceShip","_extractId","name","population","rotationPeriod","rotation_period","diametr","diameter","img","person","gender","birdYear","birth_year","eyeColor","eye_color","model","manufacturer","url","fetch","this","res","ok","Error","status","json","ships","match","Header","className","to","Spinner","class","Component","RandomPlanet","swapiService","state","loading","error","updatePlanet","Math","floor","random","then","setState","clearInterval","interval","setInterval","spinner","content","PlanetView","Fragment","src","alt","ItemList","itemList","getData","props","arr","label","renderItem","onClick","onItemSelected","items","renderItems","Record","field","ItemDetails","itemId","updateItem","prevProps","React","Children","children","child","cloneElement","Row","left","right","PlanetPage","selectedItem","onPlanetSelected","itemDetails","getImgUrl","planetList","PeoplePage","onPersonSelected","hasError","personList","App","swapi","path","render","exact","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.074f2479.chunk.js","sourcesContent":["export default class SwapiService {\r\n  _apiBase = 'https://swapi.dev/api/';\r\n  _imgApiBase = 'https://starwars-visualguide.com/assets/img/';\r\n  async getResource(url){\r\n\r\n    const res = await fetch(`${this._apiBase}${url}`);\r\n    if (!res.ok) {\r\n      throw new Error(`Could not fetch ${url}, recived ${res.status}`)\r\n    }\r\n    return await res.json();\r\n  }\r\n  getAllPeople = async() =>{\r\n    const resp = await this.getResource(`people/`);\r\n    const out = resp.results.map((item) =>{\r\n      return this._transformPerson(item)\r\n    })\r\n    return out;\r\n  }\r\n   getPerson =async(id) =>{\r\n    const resp =await this.getResource(`people/${id}/`);\r\n    const people = this._transformPerson(resp);\r\n    return people;\r\n  }\r\n  getImgPerson = (id) =>{\r\n    const img = `${this._imgApiBase}characters/${id}.jpg`;\r\n    return img;\r\n  }\r\n  getImgPlanet = (id) =>{\r\n    const img = `${this._imgApiBase}planets/${id}.jpg`;\r\n    return img;\r\n  }\r\n  getImgSpaceShip = (id) =>{\r\n    const img = `${this._imgApiBase}starships/${id}.jpg`;\r\n    return img;\r\n  }\r\n   getPlanet = async(id) =>{\r\n    const planet = await this.getResource(`planets/${id}`)\r\n    const pOut = this._transformPlanet(planet);\r\n    return pOut\r\n  }\r\n    getAllPlanets = async() =>{\r\n    const response = await this.getResource(`planets/`);\r\n    const planets = response.results.map(this._transformPlanet);\r\n    return planets\r\n  }\r\n  async getAllSpaceShips(){\r\n    const resp = await this.getResource(`starships/`);\r\n    const ships = this.results.map(this._transformSpaceShip)\r\n    return ships;\r\n  }\r\n   getSpaceShip = async (id) =>{\r\n    const resp = await this.getResource(`starships/${id}`);\r\n    const ship = this._transformSpaceShip(resp);\r\n    return ship;\r\n  }\r\n  _extractId(item){\r\n    let id = item.url.match(/\\/([\\d]*)\\/$/)[1];\r\n    return id\r\n  }\r\n  _transformPlanet = (planet) =>{\r\n    const id =this._extractId(planet);\r\n    \r\n    return {\r\n      id,\r\n      name: planet.name,\r\n      population: planet.population,\r\n      rotationPeriod: planet.rotation_period,\r\n      diametr: planet.diameter,\r\n      img: this.getImgPlanet(id)\r\n    }\r\n  }\r\n  _transformPerson = (person) => {\r\n    const id = this._extractId(person);\r\n    const out = {\r\n      id:id ,\r\n      name: person.name,\r\n      gender: person.gender,\r\n      birdYear: person.birth_year,\r\n      eyeColor: person.eye_color,\r\n      img: this.getImgPerson(id),\r\n    }\r\n    return out\r\n  }\r\n  _transformSpaceShip = (ship) => {\r\n    const id = this._extractId(ship);\r\n    return{\r\n      id: this._extractId(ship),\r\n      name: ship.name,\r\n      model: ship.model,\r\n      manufacturer: ship.manufacturer,\r\n      img: this.getImgSpaceShip(id)\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// const test = new SwapiService();\r\n// console.log('getAllPlanet:', test.getAllPlanets());\r\n","import Header from './header'\r\n\r\nexport default Header;\r\n","import React from 'react'\r\nimport './header.css';\r\nimport {Link, BrowserRouter} from \"react-router-dom\";\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header d-flex\">\r\n      <h3>\r\n        <Link to=\"/\">Star-DB</Link>\r\n      </h3>\r\n      <ul className=\"d-flex\">\r\n        <li>\r\n          <Link to=\"/people\">People</Link>\r\n        </li>\r\n        <li><Link to=\"/planet\">Planets</Link></li>\r\n        <li><Link to=\"/starships\">Starships</Link></li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n","import Spinner from './spinner';\r\nexport default Spinner;\r\n","import React, {Component} from 'react';\r\nimport './spinner.css';\r\n\r\nexport default class Spinner extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"loadingio-spinner-double-ring-50gp1v2u54a\">\r\n        <div class=\"ldio-gwirqlm4ykp\">\r\n      <div></div>\r\n      <div></div>\r\n      <div><div></div></div>\r\n      <div><div></div></div>\r\n      </div></div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport SwapiService from '../../services/swapi/swapi-servicw'\r\nimport './random-planet.css'\r\nimport Spinner from '../spinner/'\r\n\r\nexport default class RandomPlanet extends Component{\r\n  swapiService = new SwapiService();\r\n  state = {\r\n    planet:{\r\n      id: 0,\r\n      name: 'none',\r\n      population:0,\r\n      rotationPeriod:0,\r\n      diametr:0\r\n    },\r\n    loading: true,\r\n    error:false\r\n  }\r\n  componentWillUnmount(){\r\n    clearInterval(this.interval)\r\n  }\r\n  componentDidMount(){\r\n    this.updatePlanet();\r\n    this.interval = setInterval(this.updatePlanet, 25000);\r\n  }\r\n  updatePlanet = () => {\r\n    const rnd = Math.floor(Math.random() * 19 +2);\r\n    const id = rnd;\r\n    this.swapiService\r\n      .getPlanet(id)\r\n      .then((planet) =>{\r\n        this.setState({planet, loading:false});\r\n      })\r\n  }\r\n  render() {\r\n    const {planet, loading } = this.state;\r\n    const spinner = loading?<Spinner/> : null;\r\n    const content = !loading ? <PlanetView planet ={planet}/> : null;\r\n\r\n    return(\r\n      <div className=\"person-details card\">\r\n        {spinner}\r\n        {content}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\nconst PlanetView = ({planet}) =>{\r\n  const { id, name, population, rotationPeriod, diametr } = planet;\r\n  return(\r\n    <React.Fragment>\r\n      <img className=\"person-image\" src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`} alt=\"\"/>\r\n        <div className=\"card-body\">\r\n          <h4>{ name }</h4>\r\n          <ul className=\"list-group list-group-flush\">\r\n            <li className=\"list-group-item\">\r\n              <span className=\"term\">Population</span>\r\n              <span>{population}</span>\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              <span className=\"term\">Rotation Period</span>\r\n              <span>{rotationPeriod} days</span>\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              <span className=\"term\">Diametr</span>\r\n              <span>{diametr} km</span>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import RandomPlanet from './random-planet'\r\n\r\nexport default RandomPlanet;\r\n","import ItemList from './item-list'\r\n\r\nexport default ItemList;\r\n","import React, {Component} from 'react';\r\nimport Spinner from '../spinner/'\r\nimport './item-list.css'\r\n\r\nexport default class ItemList extends Component {\r\n\r\n  state ={\r\n    itemList:null\r\n  }\r\n  componentDidMount(){\r\n    const { getData } = this.props;\r\n      getData()\r\n      .then((itemList) =>{\r\n        this.setState({\r\n          itemList: itemList\r\n        });\r\n      })\r\n  }\r\n\r\n  renderItems(arr){\r\n    return arr.map(( item ) => {\r\n      const { id} = item\r\n      const label = this.props.renderItem(item)\r\n      return(\r\n        <li className=\"list-group-item\"\r\n          key= {id}\r\n          onClick = {() => this.props.onItemSelected(id)}\r\n          getData = { this.props.getData }\r\n          >\r\n          { label }\r\n        </li>\r\n      )\r\n    })\r\n  }\r\n  render(){\r\n    const { itemList } = this.state;\r\n    if (!itemList) {\r\n      return <Spinner/>\r\n    }\r\n    const items = this.renderItems(itemList);\r\n    return (\r\n    <ul className=\"item-list list-group\">\r\n      {items}\r\n    </ul>\r\n    )\r\n\r\n  }\r\n}\r\n// ItemList.defaultProps={\r\n//   onItemSelected:()=> {return 5}\r\n// }","import React, {Component} from 'react';\r\nimport Spinner from '../spinner'\r\nimport './item-details.css';\r\n\r\nconst  Record = ({item, field, label}) =>{\r\n  return(\r\n    <li className=\"list-group-item\">\r\n      <span className=\"term\">{ label}</span>\r\n      <span>{ item[field] }</span>\r\n    </li>\r\n  )\r\n}\r\nexport { Record }\r\n\r\nexport default class ItemDetails extends Component{\r\n\r\n  state ={\r\n    item:{\r\n      itemId: null,\r\n      name: null,\r\n      gender: null,\r\n      birdYear: null,\r\n      eyeColor: null,\r\n      img:null\r\n    },\r\n    loading: true,\r\n  }\r\n  componentDidMount(){\r\n    this.updateItem();\r\n  }\r\n  componentDidUpdate(prevProps){\r\n    if (prevProps !== this.props) {\r\n      this.updateItem(this.state.item.itemId);\r\n    }\r\n  }\r\n  updateItem(){\r\n    this.setState({loading:true})\r\n    const { getData, itemId} = this.props\r\n\r\n    if(!itemId) {return}\r\n    getData(itemId)\r\n      .then((item) =>{\r\n        this.setState({\r\n          item,\r\n          loading: false,\r\n        })\r\n      });\r\n\r\n  }\r\n  render(){\r\n    const { loading, item } = this.state;\r\n    return(\r\n      <div className=\"person-details card\">\r\n        <img className=\"person-image\" src={item.img} alt=\"\"></img>\r\n        <div className=\"card-body\">\r\n          <h4>{item.birdYear}</h4>\r\n          <ul className=\"list-group list-group-flush\">\r\n            {\r\n              React.Children.map(this.props.children, (child) =>{\r\n                return React.cloneElement(child, {item});\r\n              })\r\n            }\r\n          </ul>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n","import ItemDetails, {Record} from './item-details'\r\n\r\nexport default ItemDetails;\r\nexport {\r\n  Record\r\n}","import Row from './row';\r\nexport default Row;","import React from \"react\";\r\n\r\nconst Row = ({left, right}) =>{\r\n  return(\r\n    <div className=\"row mb2\">\r\n      <div className=\"col-md-6\">\r\n        {left}\r\n      </div>\r\n    \r\n      <div className=\"col-md-6\">\r\n        {right}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default Row;","import PlanetPage from './planet-page';\r\nexport default PlanetPage;\r\n","import { Component } from 'react';\r\nimport './planet-page.css';\r\nimport ItemList from '../item-list'\r\nimport ItemDetails, { Record } from '../item-details/';\r\nimport Row from \"../row\";\r\n\r\nexport default class PlanetPage extends Component{\r\n  state = {\r\n    selectedItem:0\r\n  }\r\n  onPlanetSelected = (selectedItem)=>{\r\n    this.setState({selectedItem});\r\n  };\r\n  \r\n  render(){\r\n    const itemDetails = (\r\n      <ItemDetails\r\n        getData = {this.props.getData.getPlanet}\r\n        itemId = {this.state.selectedItem}\r\n        getImgUrl ={1}>\r\n        <Record field=\"name\" label =\"Имя\"/>\r\n        <Record field=\"diametr\" label =\"Диаметр\"/>\r\n        <Record field=\"population\" label=\"Население\"/>\r\n      </ItemDetails>\r\n    );\r\n    const planetList = (\r\n      <ItemList\r\n        onItemSelected={ this.onPlanetSelected }\r\n        getData = {this.props.getData.getAllPlanets}\r\n        renderItem = { (item) => `${item.name}` }\r\n      />\r\n    )\r\n  \r\n    return(\r\n      <Row\r\n        left={ planetList }\r\n        right={ itemDetails }\r\n      />\r\n    )\r\n    \r\n  }\r\n}\r\n","import PeoplePage from './people-page';\r\n\r\nexport default PeoplePage;\r\n","import React, { Component } from 'react';\r\nimport './people-page.css';\r\nimport ItemList from '../item-list/'\r\nimport ItemDetails, { Record } from '../item-details/';\r\nimport Row from \"../row\";\r\n\r\nexport default class PeoplePage extends Component{\r\n  state = {\r\n    selectedItem:1\r\n  }\r\n  onPersonSelected = (selectedItem)=>{\r\n    this.setState({selectedItem});\r\n  };\r\n  \r\n  render(){\r\n    if (this.state.hasError) {\r\n      // return <ErrorIndicator/>\r\n    }\r\n    const itemDetails = (\r\n      <ItemDetails\r\n        getData = {this.props.getData.getPerson}\r\n        itemId = {this.state.selectedItem}\r\n        getImgUrl ={1}>\r\n        <Record field=\"name\" label =\"Имя\"/>\r\n        <Record field=\"hair_color\" label=\"Цвет волос\"/>\r\n      </ItemDetails>\r\n    );\r\n    const personList = (\r\n      <ItemList\r\n        onItemSelected={ this.onPersonSelected }\r\n        getData = {this.props.getData.getAllPeople}\r\n        renderItem = { (item) => `${item.name}` }\r\n      />\r\n    )\r\n    \r\n    return(\r\n      <Row\r\n        left={ personList }\r\n        right={itemDetails }\r\n      />\r\n    )\r\n  }\r\n}\r\n","import { Component } from 'react';\r\nimport './starship-page.css';\r\n\r\nexport default class StarshipPage extends Component{\r\n  render(){\r\n    return(\r\n      <div>StarshipPage</div>\r\n    )\r\n  }\r\n}\r\n","import App from './app'\r\nexport default App;\r\n","import React, {Component} from 'react';\r\nimport SwapiService from '../../services/swapi/swapi-servicw'\r\nimport Header from '../header';\r\nimport RandomPlanet from '../random-planet';\r\nimport PlanetPage from '../planet-page/'\r\nimport PeoplePage from '../people-page/'\r\nimport StarshipPage from \"../starship-page\";\r\nimport Row from '../row/'\r\nimport './app.css';\r\nimport {BrowserRouter as Router,Route} from \"react-router-dom\";\r\nimport ItemDetails, {Record} from \"../item-details\";\r\nimport ItemList from \"../item-list\";\r\n\r\n\r\nexport default class App extends Component{\r\n  state={\r\n    swapi:new SwapiService()\r\n  }\r\n  render(){\r\n    \r\n    return (\r\n        <div>\r\n          <Router>\r\n            <Header />\r\n            <div className=\"row mb2\">\r\n              <div className=\"col-md-6\">\r\n                <RandomPlanet />\r\n              </div>\r\n            </div>\r\n            <Route\r\n              \r\n              path=\"/\"\r\n              render = {() =>{return <h1>Welcome to StarDB</h1>}}\r\n              exact\r\n            />\r\n            <Route\r\n              path=\"/people\"\r\n              children = { <PeoplePage  getData = {this.state.swapi}/>}/>\r\n            <Route\r\n              exact\r\n              path=\"/planet\"\r\n              children= { <PlanetPage getData = { this.state.swapi }/>}/>\r\n            <Route\r\n              path = \"/starships/:id\"\r\n              \r\n              component = {ItemList}\r\n            />\r\n          </Router>\r\n        </div>\r\n      \r\n    \r\n    )\r\n  }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app/'\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n"],"sourceRoot":""}